Chat, tenho esta função "get_subgraph_of_the_job" funcionando perfeitamente.

```Python
import logging
from gremlin_python.process.traversal import T
from gremlin_python.process.graph_traversal import __
from neptune_python_utils.gremlin_utils import GremlinUtils
from utils.project_properties import project_job, project_table

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def get_node(g: GremlinUtils, node_type: str, node_name: str) -> list:
    logger.info("Getting node")
    return g.V().has(node_type, "table_name", node_name) \
            .project("id", "table_name") \
            .by(T.id).by("table_name").toList()


def get_edge_projections():
    return __.union(
        # JOB -> TABLE
        __.out("schedule")
          .out("has")
          .out("produce")
          .hasLabel("TABLE").as_("table")
          .select("job", "table")
          .project("from", "to")
          .by(__.select("job").id_())
          .by(__.select("table").id_()),

        # TABLE -> JOB
        __.out("schedule")
          .out("has")
          .in_("consumed_by")
          .hasLabel("TABLE").as_("table")
          .select("job", "table")
          .project("from", "to")
          .by(__.select("table").id_())
          .by(__.select("job").id_())
    )


def asc_path():
    return __.out("schedule") \
            .out("has") \
            .in_("consumed_by") \
            .inE("produce").outV() \
            .inE("has").outV() \
            .inE("schedule").outV()


def desc_path():
    return __.out("schedule") \
            .out("has") \
            .out("produce") \
            .outE("consumed_by").inV() \
            .inE("has").outV() \
            .inE("schedule").outV()


def get_subgraph_of_the_job(
        g: GremlinUtils,
        job_name: str,
        level: int = 10
        ) -> list:
    job_select = project_job(
        g.V().has("JOB", "name", job_name)
    ).dedup().toList()

    ascendant = g.V().has("JOB", "name", job_name).as_("start") \
        .union(
            # Caminho original do job
            project_table(
                __.out("schedule").out("has").in_("consumed_by")
            ),
            # Caminho dos descendentes
            __.repeat(
                __.out("schedule")
                .out("has")
                .in_("consumed_by")
                .inE("produce").outV()
                .inE("has").outV()
                .inE("schedule").outV()
            ).emit().times(level)
             .dedup()
             .union(
                 __.choose(
                     __.hasLabel("JOB"),
                     project_job(__.identity())
                 ),
                 __.out("schedule")
                 .out("has")
                 .in_("consumed_by")
                   .choose(
                       __.hasLabel("TABLE"),
                       project_table(__.identity())
                   )
             ).dedup()
        ).dedup().toList()

    descendant = g.V().has("JOB", "name", job_name).as_("start") \
        .union(
            # Caminho original do job
            project_table(
                __.out("schedule").out("has").out("produce")
            ),
            # Caminho dos descendentes
            __.repeat(
                __.out("schedule")
                .out("has")
                .out("produce")
                .outE("consumed_by").inV()
                .inE("has").outV()
                .inE("schedule").outV()
            ).emit().times(level)
             .dedup()
             .union(
                 __.choose(
                     __.hasLabel("JOB"),
                     project_job(__.identity())
                 ),
                 __.out("schedule")
                 .out("has")
                 .out("produce")
                   .choose(
                       __.hasLabel("TABLE"),
                       project_table(__.identity())
                   )
             ).dedup()
        ).dedup().toList()

    raw_edges = g.V().has("JOB", "name", job_name).as_("job") \
        .union(
            # ascendant edges
            get_edge_projections(),
            __.repeat(asc_path()).emit().times(level).as_("job")
            .union(get_edge_projections()),
            # descendant edges
            __.repeat(desc_path()).emit().times(level).as_("job")
            .union(get_edge_projections())
        ) \
        .dedup().toList()

    valid_ids = set()
    for node in job_select + ascendant + descendant:
        valid_ids.add(node["id"])

    edges = [
        edge for edge in raw_edges
        if isinstance(edge, dict) and
        edge.get("from") in valid_ids and
        edge.get("to") in valid_ids
    ]

    ascendant_jobs = [
        item for item in ascendant if item['label'] == 'JOB'
    ]
    ascendant_tables = [
        item for item in ascendant if item['label'] == 'TABLE'
    ]
    descendant_jobs = [
        item for item in descendant if item['label'] == 'JOB'
    ]
    descendant_tables = [
        item for item in descendant if item['label'] == 'TABLE'
    ]
    return {
        "job": job_select[0] if job_select else {},
        "ascendantJobs": ascendant_jobs,
        "ascendantTables": ascendant_tables,
        "descendantJobs": descendant_jobs,
        "descendantTables": descendant_tables,
        "edges": edges
    }
```

Tenho a seguinte base de dados de grafos abaixo, com exemplo na sintaxe mermaid:

```mermaid
flowchart TD
30d1e004-0579-44d8-a5e7-a19a0a2868f2(JOB - Job1) --> |schedule| 09c46e32-9c93-475e-85b2-3a889b4eeb21(JOB_RUN - jr_c450154b86d770c38f8cf4dac2ef16a47648037eae1b264f675b84daff2096c9)
09c46e32-9c93-475e-85b2-3a889b4eeb21(JOB_RUN - jr_c450154b86d770c38f8cf4dac2ef16a47648037eae1b264f675b84daff2096c9) --> |has| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
c3394311-b349-40fb-9079-604c02827034(TABLE - Table1) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
0094f9bf-d322-46f9-b700-af40c2201d05(TABLE - Table2) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
c7b8b588-608c-4c51-88f2-f21fbe913024(TABLE - Table3) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
ed43b9a9-a4c9-496a-ab41-0d956dd974d8(TABLE - Table4) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
8776864b-7517-4f2b-9303-752fe364228d(TABLE - Table5) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
8e7c3be6-e972-42b6-ad60-e96c5be789c2(TABLE - Table6) --> |consumed_by| a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b)
a049419f-8978-49a0-a3fd-059209b44d5b(EXECUTION_PLAN - 9ecd36a0-0b67-45ff-b2e4-a3be02517e9b) --> |produce| 467aa82a-cf37-418d-a1d5-c80e2ed10159(TABLE - Table7)
30d1e004-0579-44d8-a5e7-a19a0a2868f2(JOB - Job1) --> |schedule| 34ff1573-c27a-49d5-b63d-7bfdcd5bf899(JOB_RUN - jr_ffeeddccbbaa99887766554433221100ffeeddccbbaa99887766554433221100)
34ff1573-c27a-49d5-b63d-7bfdcd5bf899(JOB_RUN - jr_ffeeddccbbaa99887766554433221100ffeeddccbbaa99887766554433221100) --> |has| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
c3394311-b349-40fb-9079-604c02827034(TABLE - Table1) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
0094f9bf-d322-46f9-b700-af40c2201d05(TABLE - Table2) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
c7b8b588-608c-4c51-88f2-f21fbe913024(TABLE - Table3) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
ed43b9a9-a4c9-496a-ab41-0d956dd974d8(TABLE - Table4) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
8776864b-7517-4f2b-9303-752fe364228d(TABLE - Table5) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
8e7c3be6-e972-42b6-ad60-e96c5be789c2(TABLE - Table6) --> |consumed_by| a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d)
a0bf36b4-a38c-428b-9f4a-9492f1c1d59e(EXECUTION_PLAN - 4b3a2b10-c9e8f7d6-5c4b3a2b1c0d) --> |produce| 467aa82a-cf37-418d-a1d5-c80e2ed10159(TABLE - Table7)
b2c1e004-0579-44d8-a5e7-a19a0a2868f3(JOB - Job2) --> |schedule| 90ef29a0-db4e-484d-97a4-6cc26294ed2c(JOB_RUN - jr_1a2b3c4d5e6f7081928374655647382910abcdefabcdefabcdefabcdefabcdef)
90ef29a0-db4e-484d-97a4-6cc26294ed2c(JOB_RUN - jr_1a2b3c4d5e6f7081928374655647382910abcdefabcdefabcdefabcdefabcdef) --> |has| 304df2b6-abb6-4ca1-945f-fb08a06b44cc(EXECUTION_PLAN - 8f7d6c5b-4a3b-4c2d-b1e0-9f8e7d6c5b4a)
467aa82a-cf37-418d-a1d5-c80e2ed10159(TABLE - Table7) --> |consumed_by| 304df2b6-abb6-4ca1-945f-fb08a06b44cc(EXECUTION_PLAN - 8f7d6c5b-4a3b-4c2d-b1e0-9f8e7d6c5b4a)
304df2b6-abb6-4ca1-945f-fb08a06b44cc(EXECUTION_PLAN - 8f7d6c5b-4a3b-4c2d-b1e0-9f8e7d6c5b4a) --> |produce| 950a074a-febb-486a-8967-3ded4156ac63(TABLE - Table8)
c3d1e004-0579-44d8-a5e7-a19a0a2868f4(JOB - Job3) --> |schedule| 76802737-1860-48be-8098-bf0a4929c085(JOB_RUN - jr_abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd)
76802737-1860-48be-8098-bf0a4929c085(JOB_RUN - jr_abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd) --> |has| 0b7c5abb-d692-481d-8d78-90cb21d91219(EXECUTION_PLAN - 7e6d5c4b-3a2b-1c0d-e9f8-7d6c5b4a3b2c)
467aa82a-cf37-418d-a1d5-c80e2ed10159(TABLE - Table7) --> |consumed_by| 0b7c5abb-d692-481d-8d78-90cb21d91219(EXECUTION_PLAN - 7e6d5c4b-3a2b-1c0d-e9f8-7d6c5b4a3b2c)
0b7c5abb-d692-481d-8d78-90cb21d91219(EXECUTION_PLAN - 7e6d5c4b-3a2b-1c0d-e9f8-7d6c5b4a3b2c) --> |produce| d118a4b1-8bcd-457c-af37-36469b21393e(TABLE - Table9)
d4e1e004-0579-44d8-a5e7-a19a0a2868f5(JOB - Job4) --> |schedule| f1b0ca7a-c3bb-43bd-b2cf-99401cbb0e49(JOB_RUN - jr_1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd)
f1b0ca7a-c3bb-43bd-b2cf-99401cbb0e49(JOB_RUN - jr_1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcd) --> |has| c8e031d7-07fd-4d6b-b015-86798ee81795(EXECUTION_PLAN - 6d5c4b3a-2b10c9e8-7d6c5b4a3b2b)
950a074a-febb-486a-8967-3ded4156ac63(TABLE - Table8) --> |consumed_by| c8e031d7-07fd-4d6b-b015-86798ee81795(EXECUTION_PLAN - 6d5c4b3a-2b10c9e8-7d6c5b4a3b2b)
d118a4b1-8bcd-457c-af37-36469b21393e(TABLE - Table9) --> |consumed_by| c8e031d7-07fd-4d6b-b015-86798ee81795(EXECUTION_PLAN - 6d5c4b3a-2b10c9e8-7d6c5b4a3b2b)
c8e031d7-07fd-4d6b-b015-86798ee81795(EXECUTION_PLAN - 6d5c4b3a-2b10c9e8-7d6c5b4a3b2b) --> |produce| bda14858-552e-4e8c-b309-cce3cedbfbb1(TABLE - Table10)
c8e031d7-07fd-4d6b-b015-86798ee81795(EXECUTION_PLAN - 6d5c4b3a-2b10c9e8-7d6c5b4a3b2b) --> |produce| 1f849355-0fa7-4832-b4b4-3d9198af459c(TABLE - Table11)
d4e1e004-0579-44d8-a5e7-a19a0a2868f5(JOB - Job4) --> |schedule| f1525a54-56c6-4fe5-a553-f70fe43e338f(JOB_RUN - jr_9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedc)
f1525a54-56c6-4fe5-a553-f70fe43e338f(JOB_RUN - jr_9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedc) --> |has| eab3c226-b29f-4617-941a-cfa4279edef3(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c)
950a074a-febb-486a-8967-3ded4156ac63(TABLE - Table8) --> |consumed_by| eab3c226-b29f-4617-941a-cfa4279edef3(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c)
d118a4b1-8bcd-457c-af37-36469b21393e(TABLE - Table9) --> |consumed_by| eab3c226-b29f-4617-941a-cfa4279edef3(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c)
eab3c226-b29f-4617-941a-cfa4279edef3(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c) --> |produce| bda14858-552e-4e8c-b309-cce3cedbfbb1(TABLE - Table10)
eab3c226-b29f-4617-941a-cfa4279edef3(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c) --> |produce| 1f849355-0fa7-4832-b4b4-3d9198af459c(TABLE - Table11)
e5f1e004-0579-44d8-a5e7-a19a0a2868f6(JOB - Job5) --> |schedule| c8e031d7-07fd-4d6b-b020-86798aa81795(JOB_RUN - jr_11223344556677889900aabbccddeeff11223344556677889900aabbccddeeff)
c8e031d7-07fd-4d6b-b020-86798aa81795(JOB_RUN - jr_11223344556677889900aabbccddeeff11223344556677889900aabbccddeeff) --> |has| 38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - 5c4b3a2b-10c9e8f7-6d5c4b3a2b1c)
467aa82a-cf37-418d-a1d5-c80e2ed10159(TABLE - Table7) --> |consumed_by| 38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - b3a2b10-c9e8f7d6-5c4b3a2b2as4)
2c3d4e5f-6a7b-8c9d-a0b1-c2d3e4f5a6b7(TABLE - Table12) --> |consumed_by| 38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - b3a2b10-c9e8f7d6-5c4b3a2b2as4)
d118a4b1-8bcd-457c-af37-36469b21393e(TABLE - Table9) --> |consumed_by| 38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - b3a2b10-c9e8f7d6-5c4b3a2b2as4)
38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - b3a2b10-c9e8f7d6-5c4b3a2b2as4) --> |produce| 2c3d4e5f-6a7b-8c9d-a0b1-c2d3e4f5a6b7(TABLE - Table12)
38cd7c76-6b7d-4ad8-9090-7453426232f2(EXECUTION_PLAN - b3a2b10-c9e8f7d6-5c4b3a2b2as4) --> |produce| 3e4f5a6b-7c8d-9e0f-a1b2-c3d4e5f6a7b8(TABLE - Table13)
```

Quero implementar na função "get_subgraph_of_the_table" que também funciona certo, os edges similar a função "get_subgraph_of_the_job".

```Python
def get_subgraph_of_the_table(
        g: GremlinUtils,
        table_name: str,
        level: int = 10
        ) -> list:

    table_select = project_table(
        g.V().has("TABLE", "table_name", table_name)
    ).dedup().toList()

    source_job = project_job(
        g.V().has("TABLE", "table_name", table_name)
        .inE("produce").outV()
        .inE("has").outV()
        .inE("schedule").outV()
    ).dedup().toList()

    ascendant = g.V().has("TABLE", "table_name", table_name) \
        .repeat(
                __.inE("produce").outV()
                  .inE("has").outV()
                  .inE("schedule").outV()
                  .out("schedule").out("has").in_("consumed_by")
            ).emit().times(level) \
             .dedup() \
             .union(
                 __.choose(
                     __.hasLabel("TABLE"),
                     project_table(__.identity())
                 ),
                 __.inE("produce").outV()
                   .inE("has").outV()
                   .inE("schedule").outV()
                   .choose(
                       __.hasLabel("JOB"),
                       project_job(__.identity())
                   )
             ).dedup().toList()

    descendant = g.V().has("TABLE", "table_name", table_name).as_("start") \
        .union(
            # Caminho original do job
            project_job(
                __.outE("consumed_by").inV().inE("has").outV().inE("schedule")
                .outV()
            ),
            # Caminho dos descendentes
            __.repeat(
                __.outE("consumed_by").inV()
                  .inE("has").outV()
                  .inE("schedule").outV()
                  .out("schedule").out("has").out("produce")
            ).emit().times(level)
             .dedup()
             .union(
                 __.choose(
                     __.hasLabel("TABLE"),
                     project_table(__.identity())
                 ),
                 __.outE("consumed_by").inV()
                   .inE("has").outV()
                   .inE("schedule").outV()
                   .choose(
                       __.hasLabel("JOB"),
                       project_job(__.identity())
                   )
             ).dedup()
        ).dedup().toList()

    ascendant_jobs = [
        item for item in ascendant if item['label'] == 'JOB'
    ]
    ascendant_tables = [
        item for item in ascendant if item['label'] == 'TABLE'
    ]
    descendant_jobs = [
        item for item in descendant if item['label'] == 'JOB'
    ]
    descendant_tables = [
        item for item in descendant if item['label'] == 'TABLE'
    ]
    return {
        "table": table_select[0] if table_select else {},
        "sourceJob": source_job,
        "ascendantJobs": ascendant_jobs,
        "ascendantTables": ascendant_tables,
        "descendantJobs": descendant_jobs,
        "descendantTables": descendant_tables
    }
```